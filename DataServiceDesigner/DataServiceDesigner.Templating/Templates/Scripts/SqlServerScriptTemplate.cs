// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DataServiceDesigner.Templating
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SchemaBrowser.Domain;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlServerScriptTemplate : SqlServerScriptTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("USE [");
            
            #line 10 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainDataService.Connection.InitialCatalog));
            
            #line default
            #line hidden
            this.Write("]\r\nGO\r\n\r\n");
            
            #line 13 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var schemaName = CurrentSchema.SchemaName.ToLower();
            
            #line default
            #line hidden
            this.Write("CREATE SCHEMA [");
            
            #line 14 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("]\r\nGO\r\n\r\nCREATE TABLE [");
            
            #line 17 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[schemaversion](
   [id]         [BIGINT] IDENTITY(1,1) NOT NULL,
   [version]    [NVARCHAR](50)         NOT NULL,
   [major]      [INT]                  NOT NULL,
   [minor]      [INT]                  NOT NULL,
   [patch]      [INT]                  NOT NULL,
   [compile]    [INT]                  NOT NULL,
   [scriptname] [NVARCHAR](50)         NOT NULL,
   [updatedat]  [DATETIMEOFFSET](7)    NOT NULL,

   CONSTRAINT [pk_schemaversion] PRIMARY KEY CLUSTERED (
      [id] ASC
   ),
   CONSTRAINT [uq_version1]
      UNIQUE ([version])
)
GO

CREATE PROCEDURE [");
            
            #line 35 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[prc_checkversion] ( 
   @OldMajor    INT,
   @OldMinor    INT,
   @OldPatch    INT,
   @OldCompile  INT,
   @NewMajor    INT,
   @NewMinor    INT,
   @NewPatch    INT,
   @NewCompile  INT
)
AS
BEGIN
   --SET NOCOUNT ON
   
   IF NOT EXISTS (SELECT version FROM [");
            
            #line 49 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[schemaversion] WHERE major = @OldMajor AND minor = @OldMinor AND patch = @OldPatch AND compile = @OldCompile)
   BEGIN 
      RAISERROR('Cannot upgrade to %d.%d.%d.%d before schema is upgraded to %d.%d.%d.%d', 16, 1, @NewMajor, @NewMinor, @NewPatch, @NewCompile, @OldMajor, @OldMinor, @OldPatch, @OldCompile)
   END 
   
   IF EXISTS (SELECT version FROM [");
            
            #line 54 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[schemaversion] WHERE major = @NewMajor AND minor = @NewMinor AND patch = @NewPatch AND compile = @NewCompile)
   BEGIN
      RAISERROR('Cannot upgrade to %d.%d.%d.%d as schema is already at this version or greater', 16, 1, @NewMajor, @NewMinor, @NewPatch, @NewCompile)
   END 
END
GO

CREATE PROCEDURE [");
            
            #line 61 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[prc_updateversion] ( 
   @NewMajor    INT,
   @NewMinor    INT,
   @NewPatch    INT,
   @NewCompile  INT
)
AS
BEGIN
   DECLARE @version NVARCHAR(43)
   SET @version = (CAST(@NewMajor AS NVARCHAR(10)) + '.' + CAST(@NewMinor AS NVARCHAR(10)) + '.' + CAST(@NewPatch AS NVARCHAR(10)) + '.' + CAST(@NewCompile AS NVARCHAR(10)))
   
   DECLARE @scriptName NVARCHAR(50)
   SET @scriptName = '");
            
            #line 73 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("_\' + (CAST(@NewMajor AS NVARCHAR(10)) + \'_\' + CAST(@NewMinor AS NVARCHAR(10)) + \'" +
                    "_\' + CAST(@NewPatch AS NVARCHAR(10)) + \'_\' + CAST(@NewCompile AS NVARCHAR(10))) " +
                    "+ \'.sql\'\r\n   \r\n   INSERT INTO [");
            
            #line 75 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("].[schemaversion] (version, major, minor, patch, compile, scriptname, updatedat)\r" +
                    "\n      VALUES (@version, @NewMajor, @NewMinor, @NewPatch, @NewCompile, @scriptNa" +
                    "me, SYSUTCDATETIME())\r\nEND\r\nGO\r\n\r\nCREATE TABLE [");
            
            #line 80 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write(@"].[nexthigh](
   [id]         [INT] IDENTITY(1,1) NOT NULL,
   [nexthigh]   [BIGINT]            NOT NULL,
   [entityname] [NVARCHAR](30)      NOT NULL,

   CONSTRAINT [pk_nexthigh] PRIMARY KEY CLUSTERED (
      [id] ASC
   ),
   CONSTRAINT [uk_nexthigh_entityname] UNIQUE NONCLUSTERED (
      [entityname] ASC
   )
)
GO

");
            
            #line 94 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
foreach(var schemaObject in CurrentSchema.Objects) {
            
            #line default
            #line hidden
            
            #line 95 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var tableName = schemaObject.TableName.ToLower();
            
            #line default
            #line hidden
            
            #line 96 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var maxPropLength = schemaObject.Properties.Max(p => p.GetColumnName().Length) + 2;
            
            #line default
            #line hidden
            
            #line 97 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
maxPropLength = (int)(Math.Round((maxPropLength + 2) / 3.0) * 3.0);
            
            #line default
            #line hidden
            
            #line 98 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var maxTypeLength = schemaObject.Properties.Max(p => p.GetColumnType(DatabaseType.SqlServer).Length) + 2;
            
            #line default
            #line hidden
            
            #line 99 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
maxTypeLength = (int)(Math.Round((maxTypeLength + 2) / 3.0) * 3.0);
            
            #line default
            #line hidden
            this.Write("CREATE TABLE [");
            
            #line 100 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("].[");
            
            #line 100 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("] (\r\n");
            
            #line 101 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
for(int i = 0; i< schemaObject.Properties.Count; i++) {
            
            #line default
            #line hidden
            
            #line 102 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var property = schemaObject.Properties[i];
            
            #line default
            #line hidden
            
            #line 103 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var propPadding = maxPropLength - (property.GetColumnName().Length + 2);
            
            #line default
            #line hidden
            
            #line 104 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var typePadding = maxTypeLength - (property.GetColumnType(DatabaseType.SqlServer).Length + 2);
            
            #line default
            #line hidden
            this.Write("   [");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GetColumnName()));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
Write(new string(' ', propPadding));
            
            #line default
            #line hidden
            this.Write("[");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GetColumnType(DatabaseType.SqlServer)));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
Write(new string(' ', typePadding));
            
            #line default
            #line hidden
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
if (!property.IsNullable) {
            
            #line default
            #line hidden
            this.Write(" NOT NULL");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
if (i < schemaObject.Properties.Count - 1) {
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 105 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
WriteLine("");
            
            #line default
            #line hidden
            
            #line 106 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(")\r\nGO\r\n\r\nALTER TABLE [");
            
            #line 110 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("].[");
            
            #line 110 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("]\r\n   ADD CONSTRAINT [pk_");
            
            #line 111 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("] \r\n      PRIMARY KEY (\r\n");
            
            #line 113 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var keyProperties = schemaObject.Properties.Where(p => p.IsPartOfKey).ToList();
            
            #line default
            #line hidden
            
            #line 114 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
for(int i = 0; i < keyProperties.Count; i++) {
            
            #line default
            #line hidden
            
            #line 115 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
var property = schemaObject.Properties[i];
            
            #line default
            #line hidden
            this.Write("         [");
            
            #line 116 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GetColumnName()));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 116 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
if (i < keyProperties.Count -1 ) {
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 116 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
} else { WriteLine(""); }
            
            #line default
            #line hidden
            
            #line 117 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("      }\r\nGO\r\n\r\nINSERT INTO [");
            
            #line 121 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("].[nexthigh] ([nexthigh], [entityname])\r\n   VALUES (0, \'");
            
            #line 122 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("\');\r\nGO\r\n\r\n");
            
            #line 125 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("[");
            
            #line 126 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(schemaName));
            
            #line default
            #line hidden
            this.Write("].[prc_updateversion] 1, 0, 0, 1\r\nGO");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\git\stuff\DataServiceDesigner\DataServiceDesigner.Templating\Templates\Scripts\SqlServerScriptTemplate.tt"

private global::DataServiceDesigner.Domain.DomainDataService _DomainDataServiceField;

/// <summary>
/// Access the DomainDataService parameter of the template.
/// </summary>
private global::DataServiceDesigner.Domain.DomainDataService DomainDataService
{
    get
    {
        return this._DomainDataServiceField;
    }
}

private global::DataServiceDesigner.Domain.DomainSchema _CurrentSchemaField;

/// <summary>
/// Access the CurrentSchema parameter of the template.
/// </summary>
private global::DataServiceDesigner.Domain.DomainSchema CurrentSchema
{
    get
    {
        return this._CurrentSchemaField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool DomainDataServiceValueAcquired = false;
if (this.Session.ContainsKey("DomainDataService"))
{
    this._DomainDataServiceField = ((global::DataServiceDesigner.Domain.DomainDataService)(this.Session["DomainDataService"]));
    DomainDataServiceValueAcquired = true;
}
if ((DomainDataServiceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DomainDataService");
    if ((data != null))
    {
        this._DomainDataServiceField = ((global::DataServiceDesigner.Domain.DomainDataService)(data));
    }
}
bool CurrentSchemaValueAcquired = false;
if (this.Session.ContainsKey("CurrentSchema"))
{
    this._CurrentSchemaField = ((global::DataServiceDesigner.Domain.DomainSchema)(this.Session["CurrentSchema"]));
    CurrentSchemaValueAcquired = true;
}
if ((CurrentSchemaValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("CurrentSchema");
    if ((data != null))
    {
        this._CurrentSchemaField = ((global::DataServiceDesigner.Domain.DomainSchema)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlServerScriptTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

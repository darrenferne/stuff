<#@ template language="C#" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainDataService" name="DomainDataService" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainObject" name="CurrentObject" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using BWF.DataServices.Support.NHibernate.Abstract;
using FluentValidation;
using <#=DomainDataService.GetNamespace()#>.<#=DomainDataService.Name#>.Domain;

namespace <#=DomainDataService.GetNamespace()#>.<#=DomainDataService.Name#>.DataService
{
    public class <#=CurrentObject.ObjectName#>Validator : Validator<<#=CurrentObject.ObjectName#>>
    {
        public <#=CurrentObject.ObjectName#>Validator()
        {
<#for(int i = 0; i < CurrentObject.Properties.Count; i++) {#>
<#var property = CurrentObject.Properties[i]; #>
<#if (property.RequiresValidation()) {#>
			RuleFor(x => x.<#=property.PropertyName#>)
<#if (!property.IsNullable) {#>
                .NotNull()<#if (property.Length == 0) {#>;<# WriteLine(""); }#>
<#}#>
<#if (property.Length > 0) {#>
<#if (!property.IsNullable) { WriteLine(""); }#>
<#if (property.IsNullable) {#>
				.Length(0, <#=property.Length#>);<# WriteLine(""); #>
<#} else {#>
				.Length(1, <#=property.Length#>);<# WriteLine(""); #>
<#}#>
<#}#>
<#if(i < CurrentObject.Properties.Count - 1) { WriteLine(""); }#>
<#}#>
<#}#>
        }
    }
}
<#@ template language="C#" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainDataService" name="DomainDataService" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using BWF.DataServices.Core.Abstract;
using BWF.DataServices.Core.Interfaces;
using BWF.DataServices.Core.Menu;
using BWF.DataServices.Support.NHibernate.Abstract;
using BWF.Globalisation.Interfaces;
using BWF.Hosting.Infrastructure.Interfaces;
using FluentValidation;
using System.Collections.Generic;
using Brady.<#=DomainDataService.Name#>.Domain;

namespace Brady.<#=DomainDataService.Name#>.DataService
{
    public class <#=DomainDataService.Name#>DataService : ConventionalDatabaseDataService<<#=DomainDataService.Name#>DataService>, I<#=DomainDataService.Name#>DataService
    {
        public <#=DomainDataService.Name#>DataService(
            IHostConfiguration hostConfiguration,
            IEnumerable<IRecordType> recordTypes,
            IGlobalisationProvider globalisationProvider,
            IAuthorisation authorisation,
            IMetadataProvider metadataProvider,
            I<#=DomainDataService.Name#>Repository repository,
            IDatabaseStreamingQueryExecutor databaseStreamingQueryExecutor)
        : base(
            <#=DomainDataService.Name#>Constants.DataServiceName,
            globalisationProvider,
            repository as DatabaseDataServiceRepository,
            recordTypes,
            metadataProvider,
            databaseStreamingQueryExecutor)
        {
            ValidatorOptions.CascadeMode = CascadeMode.StopOnFirstFailure;
        }

        private MenuItem CreateMenuItemForRecordType(string typeName, string displayName, int position)
        {
            return new MenuItem()
            {
                Id = $"{<#=DomainDataService.Name#>Constants.DataServiceName}-{typeName}",
                Text = displayName,
                Link = $"{{{{appSetting-HostUrl}}}}/view/#default/{<#=DomainDataService.Name#>Constants.DataServiceName}/{typeName}",
                Position = position
            };
        }

        public override IEnumerable<MenuItem> GetCustomMenus()
        {
            var menu = new List<MenuItem>()
            {
                new MenuItem() {
                    Id = <#=DomainDataService.Name#>Constants.DataServiceName,
                    Text = <#=DomainDataService.Name#>Constants.DataServiceDisplayName,
                    Position = 1,
<#var position = 0;#>
<#foreach(var domainObject in DomainDataService.Schemas.SelectMany(s => s.Objects)) {#>
<#position++;#>
                    Items = new List<MenuItem>() {
                        CreateMenuItemForRecordType(nameof(<#=domainObject.ObjectName#>), "<#=domainObject.DisplayName#>", <#=position#>)
                    }
<#}#>
                }
            };
            return menu;
        }
    }
}

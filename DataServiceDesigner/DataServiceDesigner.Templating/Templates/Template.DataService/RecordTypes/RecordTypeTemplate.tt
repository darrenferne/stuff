<#@ template language="C#" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainDataService" name="DomainDataService" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainObject" name="CurrentObject" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using AutoMapper;
<#if (!CurrentObject.SupportsIHaveId()) {#>
using BWF.DataServices.Core.Abstract;
<#} else {#>
using BWF.DataServices.Support.NHibernate.Abstract;
<#}#>
using BWF.DataServices.Metadata.Attributes.Actions;
using <#=DomainDataService.GetNamespace()#>.<#=DomainDataService.Name#>.Domain;

namespace <#=DomainDataService.GetNamespace()#>.<#=DomainDataService.Name#>.DataService
{
	[ViewAction("<#=CurrentObject.DisplayName#>")]
<#if (CurrentObject.SupportsIHaveId()) {#>
    [CreateAction("<#=CurrentObject.DisplayName#>")]
    [EditAction("<#=CurrentObject.DisplayName#>")]
    [DeleteAction("<#=CurrentObject.DisplayName#>")]
<#}#>
<#if (CurrentObject.SupportsIHaveId()) {#>
    public class <#=CurrentObject.ObjectName#>RecordType : ChangeableRecordType<<#=CurrentObject.ObjectName#>, <#=CurrentObject.GetKeyType()#>, <#=CurrentObject.ObjectName#>BatchValidator>
<#} else {#>
	public class <#=CurrentObject.ObjectName#>RecordType : RecordType<<#=CurrentObject.ObjectName#>, <#=CurrentObject.ObjectName#>>
<#}#>
    {
        public override void ConfigureMapper()
        {
            Mapper.CreateMap<<#=CurrentObject.ObjectName#>, <#=CurrentObject.ObjectName#>>(); 
        }
    }
}

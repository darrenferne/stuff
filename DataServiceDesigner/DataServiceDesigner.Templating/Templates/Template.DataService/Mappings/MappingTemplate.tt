<#@ template language="C#" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainDataService" name="DomainDataService" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainObject" name="CurrentObject" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using NHibernate.Mapping.ByCode;
using NHibernate.Mapping.ByCode.Conformist;
using Brady.<#=DomainDataService.Name#>.Domain;

namespace Brady.<#=DomainDataService.Name#>.DataService
{
    public class <#=CurrentObject.ObjectName#>Mapping : ClassMapping<<#=CurrentObject.ObjectName#>>
    {
        public <#=CurrentObject.ObjectName#>Mapping()
        {
<#if (CurrentObject.HasCompositeKey()) {#>
			ComposedId(k =>
            {
<#foreach(var property in CurrentObject.Properties.Where(p => p.IsPartOfKey)) {#>
                k.Property(x => x.<#=property.PropertyName#>, m => m.Column("<#=property.ColumnName#>"));
<#}#>
            });
<#} else {#>
			Id(p => p.<#=CurrentObject.GetKeyProperty()#>);
<#}#>
<#foreach(var property in CurrentObject.Properties.Where(p => !p.IsPartOfKey)) {#>
<#var columnName = string.IsNullOrEmpty(property.ColumnName) ? property.PropertyName : property.ColumnName;#>
<#if (string.Compare(property.PropertyName, columnName, true) == 0 && property.IsNullable) {#>
			Property(p => p.<#=property.PropertyName#>);
<#} else {#>
            Property(p => p.<#=property.PropertyName#>, m => 
			{
<#if (string.Compare(property.PropertyName, columnName, true) != 0) {#>
				m.Column("<#=columnName#>");
<#}#>
<#if (!property.IsNullable) {#>
				m.NotNullable(true);
<#}#>
			});
<#}#>
<#}#>
        }
    }
}

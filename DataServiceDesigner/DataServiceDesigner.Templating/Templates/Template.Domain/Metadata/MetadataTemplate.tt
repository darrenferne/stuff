<#@ template language="C#" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainDataService" name="DomainDataService" #>
<#@ parameter type="DataServiceDesigner.Domain.DomainObject" name="CurrentObject" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DataServiceDesigner.Domain" #>
<#@ output extension=".cs" #>
using BWF.DataServices.Metadata.Fluent.Abstract;

namespace Brady.<#=DomainDataService.Name#>.Domain
{
    public class <#=CurrentObject.ObjectName#>Metadata : TypeMetadataProvider<<#=CurrentObject.ObjectName#>>
    {
        public <#=CurrentObject.ObjectName#>Metadata()
        {
            AutoUpdatesByDefault();

            DisplayName("<#=CurrentObject.DisplayName#>");

<#foreach(var property in CurrentObject.Properties) {#>
<#switch(property.PropertyType) {#>
<#case PropertyType.Int32:#>
<#case PropertyType.Int64:#>
			IntegerProperty(x => x.<#=property.PropertyName#>)
<#break;#>
<#case PropertyType.Decimal:#>
<#case PropertyType.Double:#>
<#case PropertyType.Float:#>
			NumericProperty(x => x.<#=property.PropertyName#>)
<#break;#>
<#case PropertyType.DateTime:#>
<#case PropertyType.DateTimeOffset:#>
			DateProperty(x => x.<#=property.PropertyName#>)
<#break;#>
<#case PropertyType.Boolean:#>
			BooleanProperty(x => x.<#=property.PropertyName#>)
<#break;#>
<#default:#>
			StringProperty(x => x.<#=property.PropertyName#>)
<#break;#>
<#}#>
<#if (property.IsPartOfKey) {#>
				.IsId()
<#}#>
				.DisplayName("<#=string.IsNullOrEmpty(property.DisplayName) ? property.PropertyName : property.DisplayName#>");

<#}#>
            ViewDefaults()
<#foreach(var property in CurrentObject.Properties) {#>
                .Property(x => x.<#=property.PropertyName#>)
<#}#>
				.OrderBy(x => x.<#=CurrentObject.Properties[0].PropertyName#>);
        }
    }
}
